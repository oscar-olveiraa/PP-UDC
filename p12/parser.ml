type token =
  | EOF
  | QUIT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | REMAINDER
  | POWER
  | EQUAL
  | LPAREN
  | RPAREN
  | FLOAT of (float)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Arith;;
  open Command;;
# 22 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* QUIT *);
  258 (* PLUS *);
  259 (* MINUS *);
  260 (* TIMES *);
  261 (* DIVIDE *);
  262 (* REMAINDER *);
  263 (* POWER *);
  264 (* EQUAL *);
  265 (* LPAREN *);
  266 (* RPAREN *);
    0|]

let yytransl_block = [|
  267 (* FLOAT *);
  268 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\004\000\002\000\001\000\001\000\002\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\000\000\015\000\
\000\000\003\000\000\000\006\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
\013\000"

let yydgoto = "\002\000\
\008\000\009\000"

let yysindex = "\003\000\
\002\255\000\000\002\000\253\254\253\254\000\000\009\255\000\000\
\046\000\000\000\003\255\000\000\057\255\253\254\253\254\000\000\
\253\254\253\254\253\254\253\254\253\254\253\254\000\000\052\000\
\066\255\016\255\016\255\008\255\008\255\008\255\008\255\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\016\000\010\000\019\000\028\000\037\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\021\000"

let yytablesize = 321
let yytable = "\004\000\
\005\000\010\000\003\000\001\000\004\000\005\000\007\000\006\000\
\011\000\009\000\005\000\015\000\006\000\007\000\022\000\008\000\
\014\000\015\000\010\000\019\000\020\000\021\000\022\000\000\000\
\012\000\013\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\025\000\012\000\026\000\027\000\028\000\
\029\000\030\000\031\000\000\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\000\000\000\000\000\000\
\000\000\005\000\017\000\018\000\019\000\020\000\021\000\022\000\
\000\000\000\000\023\000\017\000\018\000\019\000\020\000\021\000\
\022\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\005\000\005\000\005\000\005\000\005\000\
\007\000\007\000\005\000\009\000\009\000\009\000\009\000\009\000\
\007\000\008\000\008\000\009\000\010\000\010\000\010\000\010\000\
\010\000\008\000\000\000\000\000\010\000\011\000\011\000\011\000\
\011\000\011\000\000\000\000\000\000\000\011\000\012\000\012\000\
\012\000\012\000\012\000\000\000\000\000\000\000\012\000\017\000\
\018\000\019\000\020\000\021\000\022\000\017\000\018\000\019\000\
\020\000\021\000\022\000\005\000\005\000\005\000\005\000\005\000\
\005\000"

let yycheck = "\003\001\
\000\000\000\000\001\001\001\000\003\001\009\001\000\000\011\001\
\012\001\000\000\009\001\009\001\011\001\012\001\007\001\000\000\
\008\001\009\001\000\000\004\001\005\001\006\001\007\001\255\255\
\004\000\005\000\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\014\000\015\000\000\000\017\000\018\000\019\000\
\020\000\021\000\022\000\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\000\000\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\005\001\006\001\007\001\
\002\001\003\001\010\001\002\001\003\001\004\001\005\001\006\001\
\010\001\002\001\003\001\010\001\002\001\003\001\004\001\005\001\
\006\001\010\001\255\255\255\255\010\001\002\001\003\001\004\001\
\005\001\006\001\255\255\255\255\255\255\010\001\002\001\003\001\
\004\001\005\001\006\001\255\255\255\255\255\255\010\001\002\001\
\003\001\004\001\005\001\006\001\007\001\002\001\003\001\004\001\
\005\001\006\001\007\001\002\001\003\001\004\001\005\001\006\001\
\007\001"

let yynames_const = "\
  EOF\000\
  QUIT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  REMAINDER\000\
  POWER\000\
  EQUAL\000\
  LPAREN\000\
  RPAREN\000\
  "

let yynames_block = "\
  FLOAT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arith) in
    Obj.repr(
# 35 "parser.mly"
      ( Eval _1 )
# 190 "parser.ml"
               : Command.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arith) in
    Obj.repr(
# 37 "parser.mly"
      ( Var_def (_1, _3) )
# 198 "parser.ml"
               : Command.command))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
      ( Quit )
# 204 "parser.ml"
               : Command.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 44 "parser.mly"
      ( Float _1)
# 211 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 46 "parser.mly"
      ( Var _1)
# 218 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 49 "parser.mly"
      ( Arith_op (Opp, _2) )
# 225 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 51 "parser.mly"
      ( Arith_bi_op (Sum, _1, _3) )
# 233 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 53 "parser.mly"
      ( Arith_bi_op (Sub, _1, _3) )
# 241 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 55 "parser.mly"
      ( Arith_bi_op (Prod, _1, _3) )
# 249 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 57 "parser.mly"
      ( Arith_bi_op (Div, _1, _3) )
# 257 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 59 "parser.mly"
      ( Arith_bi_op (Mod, _1, _3) )
# 265 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith) in
    Obj.repr(
# 61 "parser.mly"
      ( Arith_bi_op (Pow, _1, _3) )
# 273 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arith) in
    Obj.repr(
# 64 "parser.mly"
      ( Fun_call (_1, _3) )
# 281 "parser.ml"
               : 'arith))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arith) in
    Obj.repr(
# 66 "parser.mly"
      ( _2 )
# 288 "parser.ml"
               : 'arith))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Command.command)
